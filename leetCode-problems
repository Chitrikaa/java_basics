121. best-time-to-buy-and-sell-stock
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

class Solution {
    public int maxProfit(int[] prices) {
        // when you're trying to find the minimum price in the array, you want to start with the highest possible value, so that any actual price in the array will be smaller than it.
        int minPrice = Integer.MAX_VALUE;
        int maxProfit=0;

    for(int i=0;i<prices.length;i++){
        if (prices[i] < minPrice) 
                minPrice = prices[i];
            
        else if (prices[i] - minPrice > maxProfit) 
                maxProfit = prices[i] - minPrice;
        }
        return maxProfit;
    }
}

441. You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.
Given the integer n, return the number of complete rows of the staircase you will build.
Input: n = 5
Output: 2
1
2 3
4 5 -
Explanation: Because the 3rd row is incomplete, we return 2.

class Solution {
    public int arrangeCoins(int n) {
        int left = 0, right = n;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int coinsUsed =  mid * (mid + 1) / 2;
            
            if (coinsUsed == n) {
                return mid;
            } else if (coinsUsed < n) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return right; 
    }
}

